{"version":3,"sources":["redux/contact/contacts-actions.js","redux/contact/contacts-reducer.js","redux/store.js","components/Container/Container.styled.js","components/Container/Container.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","redux/contact/contacts-selector.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/ContactsFilter/ContactsFilter.styled.js","components/ContactsFilter/ContactsFilter.jsx","App.js","index.js"],"names":["addContact","createAction","name","number","payload","id","nanoid","deleteContact","changeFilter","items","createReducer","actions","state","filter","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistor","persistStore","MainContainer","styled","div","Container","children","BoxSection","Title","h1","Section","title","defaultProps","getContacts","getFilter","getfilteredContacts","normalizedFilter","toLowerCase","includes","Form","form","Label","label","Input","input","Button","button","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","handleChange","event","target","value","duplicateName","find","contact","resetForm","onSubmit","preventDefault","toast","warn","contactsActions","type","placeholder","onChange","pattern","required","List","ul","Item","li","Name","span","Number","a","ContactItem","onDeleteContact","href","onClick","ContactList","map","ContactsFilter","currentTarget","App","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.43fa9b43.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit'; // Импорт функции создания экшена\r\nimport { nanoid } from 'nanoid';\r\n\r\n// Создание экшена для добавления контакта: type + payload + Prepare Callback\r\nconst addContact = createAction('contacts/add', (name, number) => ({\r\n  payload: {\r\n    id: nanoid(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\n// Создание экшена для удаления контакта\r\nconst deleteContact = createAction('contacts/delete');\r\n\r\n// Создание экшена для фильтра\r\nconst changeFilter = createAction('contacts/change-filter');\r\n\r\n// eslint-disable-next-line\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import { createReducer, combineReducers } from '@reduxjs/toolkit'; // Импорт функции создания редюсера\r\nimport actions from './contacts-actions';\r\n\r\n// Создание редюсера для массива items в контактах (добавление контакта и удаление)\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [payload, ...state],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\n// Создание редюсера для фильтра в контактах\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\n// Экспорт всех редюсеров через комбайн\r\nexport default combineReducers({ items, filter });\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'; // Импорт функции создания хранилища и прослойки\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist'; // Импорт функции персистеров и фикса консоли\r\n\r\nimport storage from 'redux-persist/lib/storage'; // Импорт локального хранилища из библиотеки персиста\r\nimport contactsReducer from './contact/contacts-reducer';\r\n\r\n// Создание прослоек + логгер. Важен порядок!\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\n// Конфиг персиста для контактов с блеклистом\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\n// Создание хранилища (корневой редюсер + прослойки + тулзы только для разработки)\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// Обёртка хранилища в персистор\r\nconst persistor = persistStore(store);\r\n\r\n// Экспорт хранилища и обёртки хранилища\r\n// eslint-disable-next-line\r\nexport default { store, persistor };\r\n","import styled from \"@emotion/styled\";\n\n\nexport const MainContainer = styled.div`\nmax-width: 1440px;\nmargin-left: auto;\nmargin-right: auto;\npadding-left: 15px;\npadding-right: 15px;\n`; ","\nimport {MainContainer} from './Container.styled'\n\n\nconst Container = ({ children }) => <MainContainer>{children}</MainContainer>;\n\nexport default Container;","\nimport styled from \"@emotion/styled\";\n\nexport const BoxSection = styled.div `\npadding: 15px;\ntext-align: center;\n`;\nexport const Title = styled.h1`\nmargin-bottom: 15px;\n`;","import PropTypes from 'prop-types';\nimport { BoxSection, Title } from './Section.styled';\n\nconst Section = ({ title, children}) => {\n    return (\n      <BoxSection >\n        <Title>{title}</Title>\n        {children}\n      </BoxSection>\n    );\n  };\n\n\n\n  Section.defaultProps = {\n    title: '',\n   \n  };\n  \n  Section.propTypes = {\n    title: PropTypes.string.isRequired ,\n    children: PropTypes.node,\n  };\n\nexport default Section;","// селектор получения части стейта массива контактов\r\nexport const getContacts = state => state.contacts.items;\r\n// селектор получения части стейта хранящего значение фильтра\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n//Составной селектор для получения отфильтрованных контактов\r\nexport const getfilteredContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  if (filter !== '') {\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  } else {\r\n    return contacts;\r\n  }\r\n};\r\n","import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\nwidth: 100%;\nmargin-right: auto;\nmargin-left: auto;\nmargin-bottom: 15px;\npadding: 15px;\nborder: 1px solid #d4d4d4;\n`;\nexport const Label = styled.label`\ndisplay: flex;\nflex-direction: column;\n\nmargin-bottom: 15px;\n\ncolor: #333232;\n`;\nexport const Input = styled.input`\npadding: 11px;\nborder: 1px solid rgba(33, 33, 33, 0.2);\nborder-radius: 4px;\n\ncursor: pointer;\n\n&:focus {\n    outline: transparent;\n    border: 1px solid #2196f3;\n}\n`;\nexport const Button = styled.button`\nmin-width: 150px;\n  height: 40px;\n  border: 0px solid transparent;\n  border-radius: 4px;\n\n  color: #fff;\n  background-color: #2196f3;\n\n  box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n\n  opacity: 1;\n\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    opacity: 0.8;\n\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n`;","import { useSelector, useDispatch } from 'react-redux'; // Импортируем хуки для использования стейта и доставки экшинов прямо в компоненте\nimport contactsActions from 'redux/contact/contacts-actions'; // Импорт экшенов из контактов\nimport { useState } from 'react';\nimport { getContacts } from 'redux/contact/contacts-selector'; // Импортируем части стейта из selector\nimport { toast } from 'react-toastify';\nimport { Form, Label, Input, Button } from './ContactForm.styled'; //Стили\n\nconst ContactForm = () => {\n  // Локальный стейт контакта\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  // Из глобального стейта через хук исп. сразу в компоненте\n  const contacts = useSelector(getContacts);\n  //  через хук исп. сразу в компоненте\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  // Проверка на дубликат\n  const duplicateName = contacts.find(\n    contact => contact.name === name.toLowerCase(),\n  );\n  //   при сабмите отправляет экшин добавления контакта\n  const onSubmit = (name, number) =>\n    dispatch(contactsActions.addContact(name, number));\n  // Метод на отправке формы. Формирует из локального стейта контакт и передает во внешний метод\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (duplicateName) {\n      toast.warn(`${name} is already on contacts`);\n      return;\n    }\n\n    onSubmit(name.toLowerCase(), number);\n    resetForm();\n  };\n\n  // Сброс полей формы (после отправки)\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Contact name\"\n          aria-label=\"Input for your name\"\n          value={name} // Пишем значение в стейт\n          onChange={handleChange} // Наблюдающий метод\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </Label>\n      <Label>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Phone number\"\n          aria-label=\"Input for your phone number\"\n          value={number} // Пишем значение в стейт\n          onChange={handleChange} // Наблюдающий метод\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n          required\n        />\n      </Label>\n\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n\n// Из глобального стейта в пропы компонента\n// const mapStateToProps = state => ({\n//   contacts: state.contacts.items,\n// });\n\n// Из глобального стейта в пропы компонента - методы\n// const mapDispatchToProps = dispatch => ({\n//   onSubmit: (name, number) =>\n//     dispatch(contactsActions.addContact(name, number)),\n// });\n// export default connect(null, mapDispatchToProps)(ContactForm);\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\n\nexport const List = styled.ul`\ndisplay: flex;\nflex-wrap: wrap;\n\nmargin-left: -15px;\nmargin-top: -15px;\n\n`;","import styled from '@emotion/styled';\n\n \nexport const Item = styled.li `\ndisplay: flex;\njustify-content: space-around;\n\nflex-basis: calc(100% / 1 - 15px);\npadding: 15px 5px;\nborder: 1px solid #d4d4d4;\n\ntext-align: center;\n\nmargin-left: 15px;\nmargin-top: 15px\n\n\n`; \n export const Name = styled.span `\n color: #333232;\n  font-weight: 500;\n `; \n\n\nexport const Number = styled.a`\nmargin-right: 15px;\n\ncolor: #000000;\n\nfont-weight: 700;\ntext-decoration: none;\n\ntransition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n&:hover,\n  &:focus {\n    color: #2196f3;\n    transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n`; \n\nexport const Button = styled.button`min-width: 50px;\nheight: 30px;\nborder: 0px solid transparent;\nborder-radius: 4px;\n\ncolor: #fff;\nbackground-color: #86888a;\n\nbox-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n\nopacity: 1;\n\ntransition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\ncursor: pointer;\n\n\n&:hover,\n&:focus {\n\n    opacity: 0.8;\n    background-color: #2196f3;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n`\n;","import PropTypes from 'prop-types';\nimport { Item, Name, Number, Button } from './ContactItem.styled';\n\n// Принимает один контакт и метод для удаления контакта\n\nconst ContactItem = ({ contact, onDeleteContact }) => {\n  const { name, number } = contact;\n\n  return (\n    <Item>\n      <Name>{name}: </Name>\n      <Number href={`tel:${number}`}>{number}</Number>\n      <Button\n        type=\"button\"\n        onClick={onDeleteContact} // Метод на клике, принимает ID контакта\n      >\n        Delete\n      </Button>\n    </Item>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import { useSelector, useDispatch } from 'react-redux'; // Импортируем хуки для использования стейта и доставки экшинов прямо в компоненте\nimport { getfilteredContacts } from 'redux/contact/contacts-selector'; // Импортируем части стейта из selector\nimport contactsActions from 'redux/contact/contacts-actions'; // Импортируем экшны для диспатча\nimport { List } from './ContactList.styled'; //Стили\nimport ContactItem from '../ContactItem/ContactItem'; //Компонент одного контакта\n\n// Принимает все отфильтрованные контакты и пробрасывает дальше метод для удаления контакта\n\nconst ContactList = () => {\n  const contacts = useSelector(getfilteredContacts);\n  const dispatch = useDispatch();\n  const onDeleteContact = id => dispatch(contactsActions.deleteContact(id));\n  return (\n    <List>\n      {contacts.map(contact => (\n        <ContactItem\n          key={contact.id}\n          contact={contact}\n          onDeleteContact={() => onDeleteContact(contact.id)}\n        />\n      ))}\n    </List>\n  );\n};\n\n// Фильтрует и возвращает результат фильтра\n// const getfilteredContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n//   if (filter !== '') {\n//     return allContacts.filter(({ name }) =>\n//       name.toLowerCase().includes(normalizedFilter),\n//     );\n//   } else {\n//     return allContacts;\n//   }\n// };\n// // Из стейта в пропы + в контакты пишет результат функции фильтра\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   contacts: getfilteredContacts(items, filter),\n// });\n\n// // Из стейта в пропы - методы\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: id => dispatch(contactsActions.deleteContact(id)),\n// });\n\n// ContactList.propTypes = {\n//   onDeleteContact: PropTypes.func,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nexport default ContactList;\n","import styled  from \"@emotion/styled\";\n\nexport const Form=styled.form\n`\n\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n\nwidth: 300px;\npadding-bottom: 30px;\n\n`;\n\n\n\nexport const Label = styled.label \n`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n\nmargin-bottom: 15px;\n\ncolor: #333232;\n`;\n\n\nexport const Input=styled.input\n`\nwidth: 100%;\npadding: 11px;\nborder: 1px solid rgba(33, 33, 33, 0.2);\nborder-radius: 4px;\ntransition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\ncursor: pointer;\n\n&:focus {\n  outline: transparent;\n  border: 1px solid #2196f3;\n};\n\n`;","import { useSelector, useDispatch } from 'react-redux'; // Импортируем хуки для использования стейта и доставки экшинов прямо в компоненте\nimport contactsActions from 'redux/contact/contacts-actions'; // Импортируем экшны для диспатча\nimport { getFilter } from 'redux/contact/contacts-selector'; // Импортируем части стейта из selector\nimport { Form, Label, Input } from './ContactsFilter.styled'; //Стили\n\n// Принимает значение с поля фильтра и метод пишущий в стейт\n\nconst ContactsFilter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Form>\n        <Label>\n          <h3>Find contacts by name:</h3>\n          <Input\n            type=\"text\"\n            value={filter}\n            onChange={event =>\n              dispatch(contactsActions.changeFilter(event.currentTarget.value))\n            }\n          />\n        </Label>\n      </Form>\n    </>\n  );\n};\n\n// Из стейта в пропы\n// const mapStateToProps = state => ({\n//   filter: state.contacts.filter,\n// });\n\n// Из стейта в пропы - методы\n// const mapDispatchToProps = distatch => ({\n//   onFilter: event =>\n//     distatch(contactsActions.changeFilter(event.currentTarget.value)),\n// });\n\nexport default ContactsFilter;\n","import Container from 'components/Container/Container.jsx';\nimport Section from 'components/Section/Section.jsx';\nimport ContactForm from 'components/ContactForm/ContactForm.jsx';\nimport ContactList from 'components/ContactList/ContactList.jsx';\nimport ContactsFilter from 'components/ContactsFilter/ContactsFilter.jsx';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst App = () => {\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n\n      <Section title=\"Contacts\">\n        <ContactsFilter />\n        <ContactList />\n      </Section>\n\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={3000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n    </Container>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}